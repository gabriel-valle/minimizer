# f(x, y) = x² + y²
def f(entry):
    x, y = entry[0], entry[1]
    return x**2+y**2
def grad_f(entry):
    x, y = entry[0], entry[1]
    return np.array([2*x, 2*y])
def hess_f(entry):
    #x, y = entry[0], entry[1]
    return np.array([[2,0],[0,2]])

# f(x, y) = 5x² + y²
def f(entry):
    x, y = entry[0], entry[1]
    return 5*x**2+y**2
def grad_f(entry):
    x, y = entry[0], entry[1]
    return np.array([10*x, 2*y])
def hess_f(entry):
    #x, y = entry[0], entry[1]
    return np.array([[10,0],[0,2]])

# f(x, y) = 5x⁴ + y²
def f(entry):
    x, y = entry[0], entry[1]
    return 5*x**4+y**2
def grad_f(entry):
    x, y = entry[0], entry[1]
    return np.array([20*x**3, 2*y])
def hess_f(entry):
    x, y = entry[0], entry[1]
    return np.array([[60*x**2,0],[0,2]])

# f(x_1, x_2) = x_1³ - x_1*x_2² - 2*x_2² - 3*x_1 (obs.: no global minimum)
def f(entry):
    x_1, x_2 = entry[0], entry[1]
    return x_1**3 - x_1*x_2**2 - 2*x_2**2 - 3*x_1
def grad_f(entry):
    x_1, x_2 = entry[0], entry[1]
    return np.array([3*x_1**2 - x_2**2 - 3, -2*x_1*x_2 - 4*x_2])
def hess_f(entry):
    x_1, x_2 = entry[0], entry[1]
    return np.array([[6*x_1, -2*x_2],[-2*x_2,-2*x_1-4]])

# f(x, y) = x⁴ + y⁴ (global minimum at (0,0))
def f(entry):
    x, y = entry[0], entry[1]
    return x**4+y**4
def grad_f(entry):
    x, y = entry[0], entry[1]
    return np.array([4*x**3, 4*y**3])
def hess_f(entry):
    #x, y = entry[0], entry[1]
    return np.array([[12*x**2,0],[0,12*y**2]])

# f(x_1, x_2) = x_1³ - 3*x_1 + x_2³ (obs.: no global minimum)
def f(entry):
    x_1, x_2 = entry[0], entry[1]
    return x_1**3-3*x_1+x_2**3
def grad_f(entry):
    x_1, x_2 = entry[0], entry[1]
    return np.array([3*x_1**2-3, 3*x_2**2])
def hess_f(entry):
    x_1, x_2 = entry[0], entry[1]
    return 6*np.array([[x_1, 0],[0, x_2]])

# f(x, y) = 100(y-x²)² + (1-x)²
def f(entry):
    x, y = entry[0], entry[1]
    return 100*(y-x**2)**2 + (1-x)**2
def grad_f(entry):
    x, y = entry[0], entry[1]
    return np.array([2*(200*x**3-200*x*y+x-1), 200*(y-x**2)])
def hess_f(entry):
    x, y = entry[0], entry[1]
    return np.array([[-400*(y-x**2)+800*x**2+2, -400*x],[-400*x, 200]])

# f(x, y) = 20 + x²+y²-10*[cos(2*pi*x)+cos(2*pi*y)]
def f(entry):
    x, y = entry[0], entry[1]
    return 20+x**2+y**2-10*[np.cos(2*np.pi*x)+np.cos(2*np.pi*y)]
def grad_f(entry):
    x, y = entry[0], entry[1]
    return np.array([2*(x+10*np.pi*np.sin(2*np.pi*x)), 2*(y+10*np.pi*np.sin(2*np.pi*y))])
def hess_f(entry):
    x, y = entry[0], entry[1]
    return np.array([[40*np.pi**2*np.cos(2*np.pi*x)+2, 0],[0, 40*np.pi**2*np.cos(2*np.pi*y)+2]])

# f(x, y) = -(y + 47)*sin(sqrt(abs(x/2 + (y  + 47))))-x * sin(sqrt(abs(x - (y  + 47)))) [eggholder function (many local minima)
def f(x):
    return -(x[1] + 47) * np.sin(np.sqrt(abs(x[0]/2 + (x[1]  + 47))))
        -x[0] * np.sin(np.sqrt(abs(x[0] - (x[1]  + 47))))

# f(x, y) = -(y + 47)*sin(sqrt(abs(x/2 + (y  + 47))))-x * sin(sqrt(abs(x - (y  + 47)))) [eggholder function (many local minima)
def f(x):
    return -20*math.exp(-0.2*math.sqrt(0.5*(x**2+y**2)))-math.exp(0.5*(math.cos(2*math.pi*x)+math.cos(2*math.pi*y)))+math.e+20
def grad_f

# f(x,y) = (1.5-x+x*y)²+(2.25-x+x*y²)²+(2.625-x+xy³)² [view recommendation: [[-4.5,-4.5],[4.5, 4.5]]
def f(entry):
    x, y = entry[0], entry[1]
    return (1.5-x+x*y)**2+(2.25-x+x*y**2)**2+(2.625-x+x*y**3)**2
def grad_f(entry):
    x, y = entry[0], entry[1]
    return np.array([-12.75+3*y+4.5*y**2+5.25*y**3+2*x*(3-2*y-y**2-2*y**3+y**4+y**6), 6*x*(0.5+1.5*y+2.625*y**2+x*(-(1/3)-(1/3)*y-y**2+(2/3)*y**3+y**5))])
def hess_f(entry):
    x, y = entry[0], entry[1]
    return np.array([[2*(y**3-1)**2+2*(y**2-1)**2+2*(y-1)**2, 4*x*(y**2-1)*y+4*y*(x*y**2-x+2.25)+6*x*(y**3-1)*y**2+6*y**2*(x*y**3-x+2.625)+2*x*(y-1)+2(x*y-x+1.5)],[4*x*(y**2-1)+4*y*(x*y**2-x+2.25)+6*x*(y**3-1)*y**2+6*y**2*(x*y**3-x+2.625)+2*x*(y-1)+2*(x*y-x+1.5), 18*x**2*y**4+8*x**2*y**2+2*x**2+12*x*y*(x*y**3-x+2.625)+4*x*(x*y**2-x+2.25)]])
